<?php

/**
 * @file
 * Documentation missing.
 */

/**
 * Implements hook_theme().
 */
function gmagick_effects_theme() {
  return array(
    // This will be a prefered.
    'gmagick_effects_image_effect_options_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_blur_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_charcoal_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_edge_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_emboss_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_gamma_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_oil_paint_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_shear_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_solarize_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_image_effect_swirl_summary' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
    'gmagick_effects_element_blur_channels' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_image_effect_info().
 */
function gmagick_effects_image_effect_info() {
  $effects = array();

  $effects['gmagick_effects_blur'] = array(
    'label' => t('Blur'),
    'help' => t('Adds blur filter to image'),
    'form callback' => 'gmagick_effects_image_effect_blur_form',
    'summary theme' => 'gmagick_effects_image_effect_blur_summary',
    'effect callback' => 'gmagick_effects_image_effect_blur_effect',
  );

  $effects['gmagick_effects_charcoal'] = array(
    'label' => t('Charcoal'),
    'help' => t('Simulates a charcoal drawing.'),
    'form callback' => 'gmagick_effects_image_effect_charcoal_form',
    'summary theme' => 'gmagick_effects_image_effect_charcoal_summary',
    'effect callback' => 'gmagick_effects_image_effect_charcoal_effect',
  );

  $effects['gmagick_effects_edge'] = array(
    'label' => t('Edge'),
    'help' => t('Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.'),
    'form callback' => 'gmagick_effects_image_effect_edge_form',
    'summary theme' => 'gmagick_effects_image_effect_edge_summary',
    'effect callback' => 'gmagick_effects_image_effect_edge_effect',
  );

  $effects['gmagick_effects_emboss'] = array(
    'label' => t('Emboss'),
    'help' => t('Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.'),
    'form callback' => 'gmagick_effects_image_effect_emboss_form',
    'summary theme' => 'gmagick_effects_image_effect_emboss_summary',
    'effect callback' => 'gmagick_effects_image_effect_emboss_effect',
  );

  $effects['gmagick_effects_flip'] = array(
    'label' => t('Mirror - Horizontal'),
    'help' => t('Creates a vertical mirror image by reflecting the pixels around the central x-axis.'),
    'effect callback' => 'gmagick_effects_image_effect_flip_effect',
  );

  $effects['gmagick_effects_flop'] = array(
    'label' => t('Mirror - Vertical'),
    'help' => t('Creates a horizontal mirror image by reflecting the pixels around the central y-axis.'),
    'effect callback' => 'gmagick_effects_image_effect_flop_effect',
  );

  $effects['gmagick_effects_gamma'] = array(
    'label' => t('Gamma'),
    'help' => t("Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3."),
    'form callback' => 'gmagick_effects_image_effect_gamma_form',
    'summary theme' => 'gmagick_effects_image_effect_gamma_summary',
    'dimensions callback' => 'gmagick_effects_image_effect_gamma_dimensions',
    'effect callback' => 'gmagick_effects_image_effect_gamma_effect',
  );

  $effects['gmagick_effects_oil_paint'] = array(
    'label' => t('Oil paint'),
    'help' => t('Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.'),
    'form callback' => 'gmagick_effects_image_effect_oil_paint_form',
    'summary theme' => 'gmagick_effects_image_effect_oil_paint_summary',
    'effect callback' => 'gmagick_effects_image_effect_oil_paint_effect',
  );

  $effects['gmagick_effects_shear'] = array(
    'label' => t('Shear'),
    'help' => t('Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.'),
    'form callback' => 'gmagick_effects_image_effect_shear_form',
    'summary theme' => 'gmagick_effects_image_effect_shear_summary',
    'effect callback' => 'gmagick_effects_image_effect_shear_effect',
  );

  $effects['gmagick_effects_solarize'] = array(
    'label' => t('Solarize'),
    'help' => t('Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.'),
    'form callback' => 'gmagick_effects_image_effect_solarize_form',
    'summary theme' => 'gmagick_effects_image_effect_solarize_summary',
    'effect callback' => 'gmagick_effects_image_effect_solarize_effect',
  );

  $effects['gmagick_effects_spread'] = array(
    'label' => t('Spread'),
    'help' => t('Special effects method that randomly displaces each pixel in a block defined by the radius parameter.'),
    'form callback' => 'gmagick_effects_image_effect_spread_form',
    'summary theme' => 'gmagick_effects_image_effect_options_summary',
    'effect callback' => 'gmagick_effects_image_effect_spread_effect',
  );

  $effects['gmagick_effects_swirl'] = array(
    'label' => t('Swirl'),
    'help' => t('Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.'),
    'form callback' => 'gmagick_effects_image_effect_swirl_form',
    'summary theme' => 'gmagick_effects_image_effect_swirl_summary',
    'effect callback' => 'gmagick_effects_image_effect_swirl_effect',
  );

  return $effects;
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_blur_form($data) {
  $data += array(
    'channel' => array(),
  );

  $element = array(
    'channel' => array(
      '#title' => t('Channels'),
      '#tree' => TRUE,
      '#theme' => 'gmagick_effects_element_blur_channels',
    ),
  );

  foreach (gmagick_channel_options() as $channel_name => $channel_label) {
    if ($channel_name !== 'all') {
      // Every other channel is ignored.
      // @see image_gmagick_blur()
      continue;
    }

    $channel = array();
    if (isset($data['channel'][$channel_name])) {
      $channel = $data['channel'][$channel_name];
    }

    $channel += array(
      'weight' => 0,
      'radius' => '',
      'sigma' => '',
    );

    $element['channel'][$channel_name] = array(
      '#tree' => TRUE,
      '#weight' => $channel['weight'],
      '#gmagick_channel' => array(
        'name' => $channel_name,
        'label' => $channel_label,
      ),
    );

    $element['channel'][$channel_name]['radius'] = array(
      '#type' => 'textfield',
      '#required' => FALSE,
      '#title' => t('Radius'),
      '#default_value' => $channel['radius'],
    );

    $element['channel'][$channel_name]['sigma'] = array(
      '#type' => 'textfield',
      '#required' => FALSE,
      '#title' => t('Sigma'),
      '#default_value' => $channel['sigma'],
    );

    $element['channel'][$channel_name]['weight'] = array(
      '#type' => 'textfield',
      '#required' => FALSE,
      '#title' => t('Weight'),
      '#default_value' => $channel['weight'],
    );
  }

  return $element;
}

function theme_gmagick_effects_element_blur_channels($variables) {
  $table = array(
    'caption' => '',
    'sticky' => FALSE,
    'header' => array(
      array('data' => t('Channel')),
      array('data' => t('Radius')),
      array('data' => t('Sigma')),
      array('data' => t('Weight')),
    ),
    'colgroups' => array(),
    'rows' => array(),
    'attributes' => $variables['element']['#attributes'],
  );

  $table['attributes']['id'] = $variables['element']['#id'];

  if (!empty($variables['element']['#title'])
    && !isset($variables['element']['#title_display'])
    || $variables['element']['#title_display'] != 'none'
  ) {
    $table['caption'] = $variables['element']['#title'];
  }

  $weight_class = 'weight';

  foreach (element_children($variables['element']) as $channel_name) {
    $row = $variables['element'][$channel_name];

    $table['rows'][$channel_name] = array(
      'data' => array(),
      'class' => array(
        'draggable',
      ),
    );

    $table['rows'][$channel_name]['data']['name'] = array(
      'data' => $row['#gmagick_channel']['label'],
    );

    $row['radius']['#title_display'] = 'none';
    $table['rows'][$channel_name]['data']['radius'] = array(
      'data' => drupal_render($row['radius']),
    );

    $row['sigma']['#title_display'] = 'none';
    $table['rows'][$channel_name]['data']['sigma'] = array(
      'data' => drupal_render($row['sigma']),
    );

    $row['weight']['#title_display'] = 'none';
    $row['weight']['#attributes']['class'][] = $weight_class;
    $table['rows'][$channel_name]['data']['weight'] = array(
      'data' => drupal_render($row['weight']),
    );
  }

  drupal_add_tabledrag($table['attributes']['id'], 'order', 'sibling', $weight_class);

  return theme('table', $table);
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_blur_summary($variables) {
  $table = array(
    'sticky' => FALSE,
    'header' => array(
      array('data' => t('Channel')),
      array('data' => t('Radius')),
      array('data' => t('sigma')),
    ),
    'rows' => array(),
  );

  $channels = gmagick_channels();
  foreach ($variables['data']['channel'] as $channel_name => $channel) {
    if (empty($channel['sigma'])) {
      continue;
    }

    $table['rows'][$channel_name] = array(
      'data' => array(
        'name' => array(
          'data' => $channels[$channel_name]['label'],
        ),
        'radius' => array(
          'data' => $channel['radius'],
        ),
        'sigma' => array(
          'data' => $channel['sigma'],
        ),
      ),
    );
  }

  return theme('table', $table);
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_blur_effect($image, array $data = array()) {
  return image_toolkit_invoke('blur', $image, array($data));
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_swirl_form($data) {
  $data += array(
    'degrees' => 90,
  );

  return array(
    'degrees' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Degrees'),
      '#description' => t('Description'),
      '#default_value' => $data['degrees'],
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_swirl_summary($variables) {
  $variables['data'] += array(
    'degrees' => 0,
  );

  return t('<strong>Degrees</strong>: @value&deg;', array(
    '@value' => $variables['data']['degrees'],
  ));
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_swirl_effect($image, $data) {
  return image_toolkit_invoke('swirl', $image, array($data));
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_charcoal_form($data) {
  $data += array(
    'radius' => 1,
    'sigma' => 1,
  );

  return array(
    'radius' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Radius'),
      '#default_value' => $data['radius'],
    ),
    'sigma' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Sigma'),
      '#default_value' => $data['sigma'],
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_charcoal_summary($variables) {
  $variables['data'] += array(
    'radius' => 0,
    'sigma' => 0,
  );

  $items = array(
    '',
    t('<strong>Radius</strong>: @value', array('@value' => $variables['data']['radius'])),
    t('<strong>Sigma</strong>: @value', array('@value' => $variables['data']['sigma'])),
  );

  return implode("<br />\n", $items);
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_charcoal_effect($image, $data) {
  return image_toolkit_invoke('charcoal', $image, array($data));
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_oil_paint_form($data) {
  $data += array(
    'radius' => 1,
  );

  return array(
    'radius' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Radius'),
      '#default_value' => $data['radius'],
      '#description' => t('The radius of the circular neighborhood.'),
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_oil_paint_summary($variables) {
  $variables['data'] += array(
    'radius' => 0,
  );

  return t('<strong>Radius</strong>: @value', array('@value' => $variables['data']['radius']));
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_oil_paint_effect($image, $data) {
  return image_toolkit_invoke('oil_paint', $image, array($data));
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_emboss_form($data) {
  $data += array(
    'radius' => 1,
    'sigma' => 1,
  );

  return array(
    'radius' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Radius'),
      '#default_value' => $data['radius'],
    ),
    'sigma' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Sigma'),
      '#default_value' => $data['sigma'],
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_emboss_summary($variables) {
  $variables['data'] += array(
    'radius' => 0,
    'sigma' => 0,
  );

  $items = array(
    '',
    t('<strong>Radius</strong>: @value', array('@value' => $variables['data']['radius'])),
    t('<strong>Sigma</strong>: @value', array('@value' => $variables['data']['sigma'])),
  );

  return implode("<br />\n", $items);
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_emboss_effect($image, $data) {
  return image_toolkit_invoke('emboss', $image, array($data));
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_gamma_form($data) {
  $data += array(
    'gamma' => 1,
  );

  return array(
    'gamma' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Radius'),
      '#default_value' => $data['gamma'],
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_gamma_summary($variables) {
  return t('<strong>Gamma</strong>: @value', array('@value' => $variables['data']['gamma']));
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_gamma_effect($image, $data) {
  return image_toolkit_invoke('gamma', $image, array($data));
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_flip_effect($image) {
  return image_toolkit_invoke('flip', $image);
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_flop_effect($image) {
  return image_toolkit_invoke('flop', $image);
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_solarize_form($data) {
  $data += array(
    'threshold' => 1,
  );

  return array(
    'threshold' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Threshold'),
      '#default_value' => $data['threshold'],
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_solarize_summary($variables) {
  return t('<strong>Threshold</strong>: @value', array('@value' => $variables['data']['threshold']));
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_solarize_effect($image, $data) {
  return image_toolkit_invoke('solarize', $image, array($data));
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_shear_form($data) {
  $data += array(
    'color' => '#ffffff',
    'x_shear' => array(),
    'y_shear' => array(),
  );

  $data['x_shear'] += array('percent' => FALSE, 'value' => 0);
  $data['y_shear'] += array('percent' => FALSE, 'value' => 0);

  return array(
    'color' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Color'),
      '#description' => t('Description'),
      '#default_value' => $data['color'],
    ),
    'x_shear' => array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Horizontal'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      'percent' => array(
        '#type' => 'checkbox',
        '#title' => t('Percent'),
        '#default_value' => $data['x_shear']['percent'],
      ),
      'value' => array(
        '#type' => 'textfield',
        '#title' => t('Value'),
        '#default_value' => $data['x_shear']['value'],
      ),
    ),
    'y_shear' => array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Vertical'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      'percent' => array(
        '#type' => 'checkbox',
        '#title' => t('Percent'),
        '#default_value' => $data['y_shear']['percent'],
      ),
      'value' => array(
        '#type' => 'textfield',
        '#title' => t('Value'),
        '#default_value' => $data['y_shear']['value'],
      ),
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_shear_summary($variables) {
  return '@todo';
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_shear_effect($image, $data) {
  return image_toolkit_invoke('shear', $image, array(array(
    'color' => $data['color'],
    'x_shear' => $data['x_shear']['value'],
    'y_shear' => $data['y_shear']['value'],
  )));
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_edge_form($data) {
  $data += array(
    'radius' => 3,
  );

  return array(
    'radius' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Radius'),
      '#default_value' => $data['radius'],
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_edge_summary($variables) {
  return t('<strong>Radius</strong>: @value', array('@value' => $variables['data']['radius']));
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_edge_effect($image, $data) {
  image_toolkit_invoke('edge', $image, array($data));
}

/**
 * Implements callback_image_effect_info__form().
 */
function gmagick_effects_image_effect_spread_form($data) {
  $data += array(
    'radius' => 3,
  );

  return array(
    'radius' => array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Radius'),
      '#default_value' => $data['radius'],
    ),
  );
}

/**
 * Implements callback_image_effect_info__summary().
 */
function theme_gmagick_effects_image_effect_options_summary($variables) {
  $summary = array();

  $labels = array(
    'radius' => t('Radius'),
  );

  foreach ($variables['data'] as $key => $value) {
    switch ($key) {
      case 'radius':
        $summary[] = t(
          '<strong>@label</strong>: @value',
          array(
            '@label' => $labels[$key],
            '@value' => $value,
          )
        );
        break;
    }
  }

  return implode("<br />\n", $summary);
}

/**
 * Implements callback_image_effect_info__effect().
 */
function gmagick_effects_image_effect_spread_effect($image, $data) {
  image_toolkit_invoke('spread', $image, array($data));
}

//hook_image_effect_info_callbacks
