<?php

/**
 * @file
 * Integration of GraphicsMagick.
 *
 * @see http://php.net/manual/en/book.gmagick.php
 * @see http://pecl.php.net/package/gmagick
 */

/**
 * Implements hook_image_toolkits().
 */
function gmagick_image_toolkits() {
  return array(
    'gmagick' => array(
      'title' => t('GraphicsMagick'),
      'available' => extension_loaded('gmagick'),
    ),
  );
}

/**
 * Implements image_TOOLKIT_get_info().
 *
 * @see image_get_info()
 */
function image_gmagick_get_info(stdClass $image) {
  $details = FALSE;
  $data = @getimagesize($image->source);

  if (isset($data) && is_array($data)) {
    $extensions = array(
      '1' => 'gif',
      '2' => 'jpg',
      '3' => 'png',
    );

    $details = array(
      'width'     => $data[0],
      'height'    => $data[1],
      'extension' => isset($extensions[$data[2]]) ? $extensions[$data[2]] : '',
      'mime_type' => $data['mime'],
    );
  }

  return $details;
}

/**
 * Implements image_TOOLKIT_load().
 *
 * Helper function to create an image resource from a file.
 *
 * @param object $image
 *   An image object. The $image->resource value will populated by this call.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_load()
 */
function image_gmagick_load(stdClass $image) {
  try {
    $image->resource = new Gmagick(drupal_realpath($image->source));

    return TRUE;
  }
  catch (Exception $e) {
    // @todo Watchdog.
    return FALSE;
  }
}

/**
 * Implements image_TOOLKIT_save().
 *
 * Helper to write an image resource to a destination file.
 *
 * @param object $image
 *   An image object.
 * @param string $destination
 *   A string file URI or path where the image should be saved.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_save()
 */
function image_gmagick_save(stdClass $image, $destination) {
  try {
    $image->resource->write(drupal_realpath($destination));

    return TRUE;
  }
  catch (Exception $e) {
    // @todo Watchdog.
    return FALSE;
  }
}

/**
 * Implements image_TOOLKIT_resize().
 *
 * Scale an image to the specified size using GM.
 *
 * @param object $image
 *   An image object. The $image->resource, $image->info['width'], and
 *   $image->info['height'] values will be modified by this call.
 * @param int $width
 *   The new width of the resized image, in pixels.
 * @param int $height
 *   The new height of the resized image, in pixels.
 * @param array $options
 *   Non standard options.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_resize()
 */
function image_gmagick_resize(stdClass $image, $width, $height, array $options = array()) {
  $options += array(
    'filter' => Gmagick::FILTER_LANCZOS,
    'blur' => 0,
    'fit' => FALSE,
  );
  try {
    $image->resource->resizeimage($width, $height, $options['filter'], $options['blur'], $options['fit']);

    return TRUE;
  }
  catch (Exception $e) {
    // @todo Watchdog.
    return FALSE;
  }
}

/**
 * Implements image_TOOLKIT_rotate().
 *
 * Rotate an image the given number of degrees.
 *
 * @param object $image
 *   An image object. The $image->resource, $image->info['width'], and
 *   $image->info['height'] values will be modified by this call.
 * @param float $degrees
 *   The number of (clockwise) degrees to rotate the image.
 * @param string $background
 *   An hexadecimal integer specifying the background color to use for the
 *   uncovered area of the image after the rotation. E.g. 0x000000 for black,
 *   0xff00ff for magenta, and 0xffffff for white. For images that support
 *   transparency, this will default to transparent. Otherwise it will
 *   be white.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_rotate()
 */
function image_gmagick_rotate(stdClass $image, $degrees, $background = NULL) {
  try {
    $image->resource->rotateImage('#' . base_convert($background, 10, 16), $degrees);

    return TRUE;
  }
  catch (Exception $e) {
    // @todo Watchdog.
    return FALSE;
  }
}

/**
 * Implements image_TOOLKIT_crop().
 *
 * Crop an image using the GraphicsMagick toolkit.
 *
 * @param object $image
 *   An image object. The $image->resource, $image->info['width'], and
 *   $image->info['height'] values will be modified by this call.
 * @param int $x
 *   The starting x offset at which to start the crop, in pixels.
 * @param int $y
 *   The starting y offset at which to start the crop, in pixels.
 * @param int $width
 *   The width of the cropped area, in pixels.
 * @param int $height
 *   The height of the cropped area, in pixels.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_crop()
 */
function image_gmagick_crop(stdClass $image, $x, $y, $width, $height) {
  try {
    $image->resource->cropImage($width, $height, $x, $y);

    return TRUE;
  }
  catch (Exception $e) {
    // @todo Watchdog.
    return FALSE;
  }
}

/**
 * Implements image_TOOLKIT_desaturate().
 *
 * Convert an image resource to grayscale.
 *
 * @todo Check this statement is true for GM as well?
 * Note that transparent GIFs loose transparency when desaturated.
 *
 * @param object $image
 *   An image object. The $image->resource value will be modified by this call.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_desaturate()
 */
function image_gmagick_desaturate(stdClass $image) {
  try {
    $image->resource->setImageColorspace(Gmagick::COLORSPACE_GRAY);

    return TRUE;
  }
  catch (Exception $e) {
    // @todo Watchdog.
    return FALSE;
  }
}
