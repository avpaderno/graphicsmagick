<?php
/**
 * @file
 * Hooks implementations for the GraphicsMagick module.
 */

/**
 * Implements hook_image_toolkits().
 */
function graphicsmagick_image_toolkits() {
  return array(
    'graphicsmagick_toolkit' => array(
      'title' => t('GraphicsMagick toolkit'),
      'available' => graphicsmagick_available(),
    ),
  );
}

/**
 * Retrieves settings for the GraphicsMagick toolkit.
 */
function image_graphicsmagick_toolkit_settings() {
  $form['graphicsmagick_toolkit_image_blur'] = array(
    '#type' => 'number',
    '#title' => t('Image blur'),
    '#description' => t('The image blur (from 0.0 to 2.0). Values higher than 1.0 make the image blurry, while values lower than 1.0 make the image sharper.'),
    '#default_value' => graphicsmagick_toolkit_get_image_blur(),
    '#min' => 0.0,
    '#max' => 2.0,
    '#step' => 0.2,
  );

  $form['graphicsmagick_toolkit_image_filter'] = array(
    '#type' => 'select',
    '#title' => t('Image filter'),
    '#description' => t('The image filter applied to the image. By default no filter is applied when an image is resized. For a better effect, choose Lanczos or Mitchell.'),
    '#options' => graphicsmagick_image_filter_options(),
    '#default_value' => graphicsmagick_toolkit_get_image_filter(),
  );

  $form['graphicsmagick_toolkit_jpeg_quality'] = array(
    '#type' => 'number',
    '#title' => t('JPEG quality'),
    '#description' => t('The image quality for JPEG images (from 0 to 100). Higher values mean better image quality but bigger files.'),
    '#default_value' => graphicsmagick_toolkit_get_jpeg_quality(),
    '#min' => 0,
    '#max' => 100,
    '#step' => 1,
  );

  $form['graphicsmagick_toolkit_png_compression'] = array(
    '#type' => 'number',
    '#title' => t('PNG compression'),
    '#description' => t('The PNG compression (from 0 to 99). Higher values do not mean better compression, although 99 usually compresses a PNG image more than other values. Verify the file size once the image has been saved.'),
    '#default_value' => graphicsmagick_toolkit_get_png_compression(),
    '#min' => 0,
    '#max' => 99,
    '#step' => 1,
  );

  return $form;
}

/**
 * Retrieves the supported extensions for the GraphicsMagick toolkit.
 */
function image_graphicsmagick_toolkit_supported_extensions() {
  // The returned extensions exclude raw images.
  return array('tif', 'bmp', 'cin', 'dcx', 'dpx', 'pdf', 'epi', 'eps', 'fits',
    'gif', 'icb', 'jpeg', 'jpg', 'pam', 'pbm', 'pdf', 'pgm', 'xpm', 'png',
    'pnm', 'ppm', 'ps', 'tif', 'sgi', 'tga', 'tiff', 'vda', 'vst', 'wbmp',
    'webp', 'xbm',
  );
}

/**
 * Scales an image to the specified size using the GraphicsMagick library.
 *
 * @param object $image
 *   An image object. The $image->info['width'] and $image->info['height']
 *   values will be modified by this call.
 * @param int $width
 *   The new width of the resized image, in pixels.
 * @param int $height
 *   The new height of the resized image, in pixels.
 * @param int|string $background
 *   A hexadecimal integer specifying the background color to use for the
 *   uncovered area of the image after the rotation, for example 0x000000 for
 *   black or 0xff00ff for magenta. The default value is 0xFFFFFF.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_resize()
 */
function image_graphicsmagick_toolkit_resize($image, $width, $height, $background = NULL) {
  $blur = graphicsmagick_toolkit_get_image_blur();
  $color = graphicsmagick_color_to_object($background);
  $filter = graphicsmagick_toolkit_get_image_filter();

  if  (!isset($color)) {
    // Creating the GmagickPixel instance failed. Use a literal string.
    $color = '#FFFFFF';
  }

  $effect = (new class {
    public function __invoke($handler, $data) {
      return $handler->resizeImage($data['width'], $data['height'], $data['filter'], $data['blur']);
    }
  });

  $result = graphicsmagick_image_effect($image, $effect, array('width' => $width,
    'height' => $height, 'background' => $color, 'blur' => $blur, 'filter' => $filter,
  ));

  try {
    // The following methods could throw an exception. In the case they do, use
    // the width and height values passed to the method.
    $new_width = $image->handler->getImageWidth();
    $new_height = $image->handler->getImageHeight();
  }
  catch (GmagickException $e) {
    $new_width = $width;
    $new_height = $height;
  }

  $image->info['width'] = $new_width;
  $image->info['height'] = $new_height;

  return $result;
}

/**
 * Rotates an image the given number of degrees.
 *
 * @param object $image
 *   An image object. The $image->info['width'] and $image->info['height']
 *   values will be modified by this call.
 * @param int $degrees
 *   The number of (clockwise) degrees to rotate the image.
 * @param int|string $background
 *   A hexadecimal value specifying the background color to use for the
 *   uncovered area of the image after the rotation, for example 0x000000 for
 *   black or 0xff00ff for magenta. The default value is #FFFFFF.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_rotate()
 */
function image_graphicsmagick_toolkit_rotate($image, $degrees, $background = NULL) {
  $color = graphicsmagick_color_to_object($background);

  if  (!isset($color)) {
    // Creating the GmagickPixel instance failed. Use a literal string.
    $color = '#FFFFFF';
  }

  $effect = (new class {
    public function __invoke($handler, $data) {
      return $handler->rotateImage($data['color'], $data['degrees']);
    }
  });

  return graphicsmagick_image_effect($image, $effect, array('color' => $color,
    'degrees' => $degrees,
  ));
}

/**
 * Crops an image using the GraphicsMagick library.
 *
 * @param object $image
 *   An image object. The $image->info['width'] and $image->info['height']
 *   values will be modified by this call.
 * @param int $x
 *   The starting x offset at which to start the crop, in pixels.
 * @param int $y
 *   The starting y offset at which to start the crop, in pixels.
 * @param int $width
 *   The width of the cropped area, in pixels.
 * @param int $height
 *   The height of the cropped area, in pixels.
 * @param int|string $background
 *   A hexadecimal value specifying the background color to use for the
 *   uncovered area of the image after the rotation, for example 0x000000 for
 *   black or 0xff00ff for magenta. The default value is #FFFFFF.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_crop()
 */
function image_graphicsmagick_toolkit_crop($image, $x, $y, $width, $height, $background = NULL) {
  $color = graphicsmagick_color_to_object($background);

  if  (!isset($color)) {
    // Creating the GmagickPixel instance failed. Use a literal string.
    $color = '#FFFFFF';
  }

  $effect = (new class {
    public function __invoke($handler, $data) {
      $handler = $handler->cropImage($data['width'], $data['height'], $data['x'], $data['y']);

      // This method is not documented on
      // https://www.php.net/manual/en/class.gmagick.php.
      // Verify it is implemented before using it.
      if (method_exists($handler, 'setImagePage')) {
        $handler = $handler->setImagePage($data['width'], $data['height'], $data['x'], $data['y']);
      }

      return $handler;
    }
  });

  $result = graphicsmagick_image_effect($image, $effect, array('background' => $color,
    'width' => $width, 'height' => $height, 'x' => $x, 'y' => $y,
  ));

  try {
    // The following methods could throw an exception. In the case they do, use
    // the width and height values passed to the method.
    $new_width = $image->handler->getImageWidth();
    $new_height = $image->handler->getImageHeight();
  }

  catch (GmagickException $e) {
    $new_width = $width;
    $new_height = $height;
  }

  $image->info['width'] = $new_width;
  $image->info['height'] = $new_height;

  return TRUE;
}

/**
 * Converts an image to grayscale.
 *
 * @param object $image
 *   An image object.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_desaturate()
 */
function image_graphicsmagick_toolkit_desaturate($image) {
  $effect = (new class {
    public function __invoke($handler, $data) {
      return $handler->setImageType(Gmagick::IMGTYPE_GRAYSCALE);
    }
  });

  return graphicsmagick_image_effect($image, $effect, array());
}

/**
 * Loads an image from a file.
 *
 * @param object $image
 *   An image object. The $image->handler and $image->format values will be
 *   populated by this call.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_load()
 * @see graphicsmagick_image_load()
 */
function image_graphicsmagick_toolkit_load($image) {
  return graphicsmagick_image_load($image);
}

/**
 * Writes an image to a destination file.
 *
 * @param object $image
 *   An image object. The $image->handler value will be changed by this call.
 * @param string $destination
 *   A URI or file path where the image should be saved.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *
 * @see image_save()
 * @see graphicsmagick_image_save()
 */
function image_graphicsmagick_toolkit_save($image, $destination) {
  return graphicsmagick_image_save($image, $destination);
}

/**
 * Gets details about an image.
 *
 * @param object $image
 *   An image object.
 *
 * @return false|array
 *   FALSE, if the file could not be found or is not an image. Otherwise, a
 *   keyed array containing information about the image:
 *   - "width": Width, in pixels.
 *   - "height": Height, in pixels.
 *   - "extension": Commonly used file extension for the image.
 *   - "mime_type": MIME type (for example 'image/jpeg' or 'image/gif').
 *
 * @see image_get_info()
 */
function image_graphicsmagick_toolkit_get_info($image) {
  $details = array(
    'width' => 0,
    'height' => 0,
    'extension' => '',
    'mime_type' => '',
  );

  try {
    $handler = new Gmagick(backdrop_realpath($image->source));
    $format = $handler->getImageFormat();

    $details['extension'] = graphicsmagick_image_format_to_extension($format);
    $details['mime_type'] = graphicsmagick_image_format_to_mime_type($format);
    $details['width'] = $handler->getImageWidth();
    $details['height'] = $handler->getImageHeight();
  }
  catch (GmagickException $e) {
    if (empty($details['extension'])) {
      // The file is not an image, the code failed before checking that, or
      // graphicsmagick_image_format_to_extension() did not return a valid
      // image extension.
      return FALSE;
    }
  }

  return $details;
}

/**
 * Returns the image quality to use with JPEG images.
 *
 * @return int
 *   The image quality for JPEG images, a value between 0 and 100, where 95 is
 *   the default value.
 */
function graphicsmagick_toolkit_get_jpeg_quality() {
  $value = config_get('graphicsmagick_toolkit_jpeg_quality');

  // If the JPEG quality value hasn't been set, return 95 instead of 0, which
  // would be a bad image quality to use by default.
  return isset($value) ? $value : 95;
}

/**
 * Returns the compression value to use with PNG images.
 *
 * @return int
 *   The compression value for PNG images, a value between 0 and 99, where 99 is
 *   the default value.
 */
function graphicsmagick_toolkit_get_png_compression() {
  $value = config_get('graphicsmagick_toolkit_png_compression');

  // If the PNG compression value hasn't been set, return 99 instead of 0, which
  // is a better compression value to use by default.
  return isset($value) ? $value : 99;
}

/**
 * Returns the blur value required by some image manipulation methods.
 *
 * @return float
 *   A value between 0.0 and 2.0 where 1.0 is
 *   the default value.
 */
function graphicsmagick_toolkit_get_image_blur() {
  $value = config_get('graphicsmagick_toolkit_image_blur');

  // If the blur value hasn't been set, return 1.0 instead of 0.
  return isset($value) ? $value : 1.0;
}

/**
 * Returns the filter to use in some image manipulation methods.
 *
 * @return int
 *   The filter value set in the settings form. It uses the
 *   Gmagick::FILTER_* constants.
 */
function graphicsmagick_toolkit_get_image_filter() {
  $value = config_get('graphicsmagick_toolkit_image_filter');

  // If  the filter value hasn't been set, return Gmagick::FILTER_LANCZOS.
  return isset($value) ? $value : Gmagick::FILTER_LANCZOS;
}

/**
 * Verifies the methods used from the GraphicsMagick toolkit can be used.
 *
 * This function could be used from the modules that need to use the Gmagick
 * extension to alter images, as the methods this function checks are necessary
 * to handle animated images.
 *
 * @return bool
 *   TRUE when the Gmagick PHP extension is loaded, the Gmagick class it
 *   implements is available, and that class implements the methods used by the
 *   toolkit.
 */
function graphicsmagick_available() {
  if (extension_loaded('gmagick') && class_exists('Gmagick')) {
    try {
      $handler = new Gmagick();

      // Verify the undocumented methods used by the toolkit are implemented.
      $missing_methods = FALSE;
      $missing_methods |= !method_exists($handler, 'getNumberImages');
      $missing_methods |= !method_exists($handler, 'coalesceImages');
      $missing_methods |= !method_exists($handler, 'deconstructImages');

      return !$missing_methods;
    }
    catch (GmagickException $e) {
      return FALSE;
    }
  }

  return FALSE;
}

/**
 * Converts a value representing a color in a GmagickPixel instance.
 *
 * @param string|int $color
 *   The value representing the color.
 *
 * @return GmagickPixel|null
 *   The GmagickPixel instance for that color, or NULL in case of error.
 */
function graphicsmagick_color_to_object($color = NULL) {
  if (isset($color)) {
    if (is_int($color)) {
      $color = sprintf('%X', $color);
    }
    elseif (is_string($color)) {
      // Remove the leading '0x' or '#', if any.
      if (strpos($color, '0x') === 0) {
        $color = substr($color, 2);
      }
      elseif ($color[0] === '#') {
        $color = substr($color, 1);
      }
    }

    // Verify the color is a hex string and normalize shorthand versions.
    // 'AB3' becomes 'AABB33', while 'A371' becomes 'AA337711'.
    if (preg_match('/^[0-9A-F]{1,4}$/', $color)) {
      $color = preg_replace('|([0-9A-F])|', '\1\1', $color);

      $color = "#$color";
    }
  }
  else {
    // Use white as color.
    $color = '#FFFFFF';
  }

  try {
    $pixel = new GmagickPixel($color);
  }
  catch (GmagickException $e) {
    // If the requested color isn't white, try to create a GmagickPixel instance
    // for white.
    if ($color !== '#FFFFFF') {
      try {
        $pixel = new GmagickPixel('#FFFFFF');

        return $pixel;
      }
      catch (GmagickException $e) {
        return NULL;
      }
    }

    return NULL;
  }
}

/**
 * Loads an image from a file.
 *
 * This function can be used from any module that needs to use the effects
 * implemented by the GraphicsMagick Effects modules independently of the
 * toolkit set for the site. In the case the used toolkit is not
 * GraphicsMagick Toolkit, this function could cause the image to be loaded
 * again, with the consequence that the image data is loaded twice in memory.
 *
 * $image->source is expected to contain the source file path. If it has not
 * been set, or it does not contain the expected value, this function will
 * return FALSE.
 *
 * @param object $image
 *   An image object. The $image->handler, and $image->format, and
 *   $image->mimeType values will be populated by this call.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 */
function graphicsmagick_image_load($image) {
  if (isset($image->handler) && !is_a($image->handler, 'Gmagick')) {
    // $image->handler has been already set, but it is not a Gmagick instance.
    // To avoid conflicts with other modules, avoid to load the image and return
    // FALSE.
    return FALSE;
  }

  if (isset($image->handler)) {
    // Destroy the existing Gmagick instance.
    try {
      $image->handler->destroy();
    } catch (GmagickException $e) {
      // Ignore the exception, as there is not anything that can be done when
      // destroying a Gmagick instance fails.
    }

    $image->handler = NULL;
  }

  try {
    if (!isset($image->source) || !is_string($image->source)) {
      // $image->source must be set to a string containing the source file path.
      // Return FALSE for error in case it is not.
      return FALSE;
    }

    $handler = new Gmagick(backdrop_realpath($image->source));
    $format = $handler->getImageFormat();
  } catch (GmagickException $e) {
    // If either the constructor or getImageFormat() returned an
    // exception, report a failure to the calling function. An exception in
    // those cases could mean the file doesn't contain an image, it does not
    // contain an image recognized from the Gmagick class, or the file is
    // corrupted.
    return FALSE;
  }

  $image->handler = $handler;
  $image->format = $format;
  $image->mimeType = graphicsmagick_image_format_to_mime_type($format);

  return TRUE;
}

/**
 * Retrieves the image format as defined by the Gmagick class.
 *
 * @param object $image
 *   The image object.
 *
 * @return false|string
 *   FALSE in case of error, or a string containing one of the format recognized
 *   by the Gmagick class.
 */
function graphicsmagick_image_format($image) {
  if (isset($image->handler) && !is_a($image->handler, 'Gmagick')) {
    // $image->handler has been already set, but it is not a Gmagick instance.
    // To avoid conflicts with other modules, avoid to load the image and return
    // FALSE.
    return FALSE;
  }

  if (!isset($image->handler)) {
    if (!graphicsmagick_image_load($image)) {
      // The file does not contain an image, it does not contain an image
      // recognized from the Gmagick class, the file is corrupted, or creating a
      // Gmagick instance was not possible for other reasons. Return FALSE.
      return FALSE;
    }
  }

  // Return the $image->format value previously set only when $image->handler is
  // a Gmagick instance.
  if (isset($image->format)) {
    return $image->format;
  }

  try {
    $format = $image->handler->getImageFormat();
  } catch (GmagickException $e) {
    // If Gmagick::getImageFormat() returned an exception, report a failure to
    // the calling function. An exception in this case could mean the file
    // does not contain an image, it does not contain an image recognized from
    // the Gmagick class, or the file is corrupted.
    return FALSE;
  }

  $image->format = $format;

  return $format;
}

/**
 * Returns the option array for the filters implemented by the Gmagick class.
 *
 * @return array
 *   An array whose keys are the Gmagick::FILTER_* constants and the values are
 *   the filter names to shown in forms.
 */
function graphicsmagick_image_filter_options() {
  return array(
    Gmagick::FILTER_UNDEFINED => t('None'),
    Gmagick::FILTER_POINT => t('Point'),
    Gmagick::FILTER_BOX => t('Box'),
    Gmagick::FILTER_TRIANGLE => t('Triangle'),
    Gmagick::FILTER_HERMITE => t('Hermite'),
    Gmagick::FILTER_HANNING => t('Hanning'),
    Gmagick::FILTER_HAMMING => t('Hamming'),
    Gmagick::FILTER_BLACKMAN => t('Blackman'),
    Gmagick::FILTER_GAUSSIAN => t('Gaussian'),
    Gmagick::FILTER_QUADRATIC => t('Quadratic'),
    Gmagick::FILTER_CUBIC => t('Cubic'),
    Gmagick::FILTER_CATROM => t('Catmull-Rom'),
    Gmagick::FILTER_MITCHELL => t('Mitchell'),
    Gmagick::FILTER_LANCZOS => t('Lanczos'),
    Gmagick::FILTER_BESSEL => t('Bessel'),
    Gmagick::FILTER_SINC => t('Sinc'),
  );
}

/**
 * Returns the option array for noise types implemented by the Gmagick class.
 *
 * @return array
 *   An array whose keys are the Gmagick::NOISE_* constants and the values are
 *   the noise names to shown in forms.
 */
function graphicsmagick_image_noise_options() {
  return array(
    Gmagick::NOISE_UNIFORM => t('Uniform'),
    Gmagick::NOISE_GAUSSIAN => t('Gaussian'),
    Gmagick::NOISE_MULTIPLICATIVEGAUSSIAN => t('Multiplicative Gaussian'),
    Gmagick::NOISE_LAPLACIAN => t('Laplacian'),
    Gmagick::NOISE_POISSON => t('Poisson'),
  );
}

/**
 * Converts the format returned by the Gmagick class in the image extension.
 *
 * Modules can get the image format required from this function using
 * graphicsmagick_image_format(), without accessing any method implemented by
 * the Gmagick class.
 *
 * @param string $format
 *   The image format returned from the Gmagick class.
 *
 * @return string
 *   The image extension used by default for that image format.
 *
 * @see graphicsmagick_image_format()
 */
function graphicsmagick_image_format_to_extension($format) {
  // The following list doesn't include all the file types recognized by the
  // GraphicsMagick library; it includes most of the image types, excluding
  // the raw images and those images the Gmagick class is not able to write.
  $extensions = array(
    'BIGTIFF' => 'tif',
    'BMP' => 'bmp',
    'CIN' => 'cin',
    'DCX' => 'dcx',
    'DPX' => 'dpx',
    'EPDF' => 'pdf',
    'EPI' => 'epi',
    'EPS' => 'eps',
    'EPSF' => 'eps',
    'EPSI' => 'eps',
    'EPT' => 'eps',
    'EPT2' => 'eps',
    'EPT3' => 'eps',
    'FITS' => 'fits',
    'GIF' => 'gif',
    'GIF87' => 'gif',
    'ICB' => 'icb',
    'JPEG' => 'jpeg',
    'JPG' => 'jpg',
    'PAM' => 'pam',
    'PBM' => 'pbm',
    'PDF' => 'pdf',
    'PGM' => 'pgm',
    'PICON' => 'xpm',
    'PNG' => 'png',
    'PNG00' => 'png',
    'PNG24' => 'png',
    'PNG32' => 'png',
    'PNG48' => 'png',
    'PNM' => 'pnm',
    'PPM' => 'ppm',
    'PS' => 'ps',
    'PTIF' => 'tif',
    'SGI' => 'sgi',
    'TGA' => 'tga',
    'TIFF' => 'tiff',
    'VDA' => 'vda',
    'VST' => 'vst',
    'WBMP' => 'wbmp',
    'WEBP' => 'webp',
    'XBM' => 'xbm',
  );

  if (!isset($extensions[$format])) {
    // Return only the values present in this array, as
    // Gmagick::getImageFormat() returns also video formats.
    return '';
  }
}

/**
 * Converts the format returned by the Gmagick class in the image MIME type.
 *
 * Modules can get the image format required from this function using
 * graphicsmagick_image_format(), without accessing any method implemented by
 * the Gmagick class.
 *
 * @param string $format
 *   The image format returned from the Gmagick class.
 *
 * @return string
 *   The image MIME type.
 *
 * @see graphicsmagick_image_format()
 */
function graphicsmagick_image_format_to_mime_type($format) {
  // Since the Gmagick class doesn't provide a method to obtain an image MIME
  // type, differently from the Imagick class, this code maps the Gmagick
  // format to the MIME type using a literal array. There is no need to use
  // mime_content_type() nor finfo_open()/finfo_file(), since the Gmagick
  // class already recognized the file type.
  // The following list doesn't include all the file types recognized by the
  // GraphicsMagick library; it includes most of the image types, excluding
  // the raw images and those images the Gmagick class is not able to write.
  $mime_types = array(
    'BIGTIFF' => 'image/tiff',
    'BMP' => 'image/bmp',
    'CIN' => 'image/cineon',
    'DCX' => 'image/x-dcx',
    'DPX' => 'image/x-dpx',
    'EPDF' => 'application/pdf',
    'EPI' => 'application/postscript',
    'EPS' => 'application/postscript',
    'EPSF' => 'application/postscript',
    'EPSI' => 'application/postscript',
    'EPT' => 'image/eps',
    'EPT2' => 'image/eps',
    'EPT3' => 'image/eps',
    'FITS' => 'image/fits',
    'GIF' => 'image/gif',
    'GIF87' => 'image/gif',
    'ICB' => 'image/x-tga',
    'JPEG' => 'image/jpeg',
    'JPG' => 'image/jpeg',
    'PAM' => 'image/x-portable-pixmap',
    'PBM' => 'image/x-portable-pixmap',
    'PDF' => 'application/pdf',
    'PGM' => 'image/x-portable-greymap',
    'PICON' => 'image/x-xpmi',
    'PNG' => 'image/png',
    'PNG00' => 'image/png',
    'PNG24' => 'image/png',
    'PNG32' => 'image/png',
    'PNG48' => 'image/png',
    'PNM' => 'image/x-portable-pixmap',
    'PPM' => 'image/x-portable-pixmap',
    'PS' => 'application/postscript',
    'PTIF' => 'image/tiff',
    'SGI' => 'image/sgi',
    'TGA' => 'image/x-tga',
    'TIFF' => 'image/tiff',
    'VDA' => 'image/x-tga',
    'VST' => 'image/x-tga',
    'WBMP' => 'image/vnd.wap.wbmp',
    'WEBP' => 'image/webp',
    'XBM' => 'image/x-xbitmap',
  );

  if (!isset($mime_types[$format])) {
    // Return only the values present in this array, as
    // Gmagick::getImageFormat() returns also video formats.
    return '';
  }

  return $mime_types[$format];
}

/**
 * Applies an effect to an image.
 *
 * @param object $image
 *   An image object. $image->handler should contain a Gmagick instance used
 *   to load the image.
 *   When the image is loaded with image_load(), and the used image toolkit is
 *   graphicsmagick_toolkit, or when the image is loaded with
 *   graphicsmagick_image_load(), $image->handler is initialized with a Gmagick
 *   instance. If $image->handler hasn't been set, this function will call
 *   graphicsmagick_image_load() to first load the image.
 *
 * @param callable $effect
 *   The callable used to apply the effect.
 * @param array $data
 *   The configuration values for the effect. All the values are passed to the
 *   effect callable, except 'background' that is used from this function to set
 *   the image background color before applying the effect.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_image_effect($image, callable $effect, array $data) {
  if (isset($image->handler) && !is_a($image->handler, 'Gmagick')) {
    // $image->handler has been already set, but it is not a Gmagick instance.
    // To avoid conflicts with other modules, avoid to save the image and return
    // FALSE.
    return FALSE;
  }

  if (!isset($image->handler)) {
    if (!graphicsmagick_image_load($image)) {
      // The file does not contain an image, it does not contain an image
      // recognized from the Gmagick class, the file is corrupted, or creating a
      // Gmagick instance was not possible for other reasons. Return FALSE.
      return FALSE;
    }
  }

  try {
    $handler = clone $image->handler;

    if (isset($data['background'])) {
      $background = $data['background'];

      // Remove the background value to avoid to pass it to the effect callable.
      unset($data['background']);

      $original_background = $handler->getImageBackgroundColor();
      $handler->setImageBackgroundColor($background);
    }

    if ($handler->getNumberImages() > 1) {
      $handler = $handler->coalesceImages();

      do {
        $handler = $effect($handler, $data);
      } while ($handler->nextImage());

      $handler = $handler->deconstructImages();
    }
    else {
      $handler = $effect($handler, $data);
    }
  }
  catch (GmagickException $e) {
    watchdog_exception('graphicsmagick', $e);

    try {
      $handler->destroy();
    }
    catch(GmagickException $e) {
      // Gmagick::destroy() can throw an exception, but nothing can be done to
      // fix that.
      // Failure to destroy the unused Gmagick instance is not considered a
      // failure of the image effect.
    }

    return FALSE;
  }

  try {
    if (isset($original_background)) {
      $handler->setImageBackgroundColor($original_background);
    }

    $image->handler->destroy();
  }
  catch (GmagickException $e) {
    // Either Gmagick::setImageBackgroundColor() or Gmagick::destroy() can throw
    // an exception, but nothing can be done to fix that.
    // Failure to change back the background color or destroy the unused Gmagick
    // instance is not considered a failure of the image effect.
  }

  $image->handler = $handler;

  return TRUE;
}

/**
 * Writes an image to a destination file.
 *
 * @param object $image
 *   An image object. $image->handler must be a Gmagick instance; the image will
 *   be saved and the $image->handler value will be changed by this call.
 * @param string $destination
 *   A URI or file path where the image should be saved.
 *
 * @return bool
 *   TRUE or FALSE, based on success.
 *   The returned value will be FALSE even in the case the $image->handler value
 *   has been set, but it is not a Gmagick instance, or the $image->handler
 *   value has not been set, and it is not possible to load the source image.
 */
function graphicsmagick_image_save($image, $destination) {
  if (isset($image->handler) && !is_a($image->handler, 'Gmagick')) {
    // $image->handler has been already set, but it is not a Gmagick instance.
    // To avoid conflicts with other modules, avoid to save the image and return
    // FALSE.
    return FALSE;
  }

  if (!isset($image->handler)) {
    // The image has not been loaded from the file using a Gmagick instance; try
    // to load it.
    // Usually, $image->handler is already set. This code has been added to let
    // a module save an image without first calling image_load() or
    // graphicsmagick_image_load().
    if (!graphicsmagick_image_load($image)) {
      return FALSE;
    }
  }

  try {
    switch ($image->mimeType) {
      case 'image/jpeg':
        $image->handler->setCompressionQuality(graphicsmagick_toolkit_get_jpeg_quality());
        break;

      case 'image/png';
        $image->handler->setCompressionQuality(graphicsmagick_toolkit_get_png_compression());
        break;
    }

    $image->handler->writeImage(backdrop_realpath($destination), $image->handler->getNumberImages() > 1);

    return TRUE;
  } catch (GmagickException $e) {
    return FALSE;
  }
}
