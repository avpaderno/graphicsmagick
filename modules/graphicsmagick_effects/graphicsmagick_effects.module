<?php
/**
 * @file
 * Hooks implementations for the GraphicsMagick Effects module.
 */

/**
 * Implements hook_image_effect_info().
 */
function graphicsmagick_effects_image_info() {
  $effects = [];

  $effects['graphicsmagick_effects_blur'] = [
    'label' => t('Blur'),
    'help' => t('Bluring will make the image details less distinct. A Gaussian operator with the given radius and standard deviation (sigma) will be applied.'),
    'dimensions passthrough' => TRUE,
    'form callback' => 'graphicsmagick_effects_blur_form',
    'effect callback' => 'graphicsmagick_effects_blur',
    'summary theme' => 'graphicsmagick_effects_blur_summary',
  ];

  $effects['graphicsmagick_effects_despeckle'] = [
    'label' => t('Despeckle'),
    'help' => t('Despeckling will reduce the speckle noise in an image while preserving the original image edges.'),
    'dimensions passthrough' => TRUE,
    'effect callback' => 'graphicsmagick_effects_despeckle',
  ];

  $effects['graphicsmagick_effects_emboss'] = [
    'label' => t('Emboss'),
    'help' => t('Embossing will convolve the image with a Gaussian operator, giving to the image a three-dimensional effect.'),
    'dimensions passthrough' => TRUE,
    'form callback' => 'graphicsmagick_effects_emboss_form',
    'effect callback' => 'graphicsmagick_effects_emboss',
    'summary theme' => 'graphicsmagick_effects_emboss_summary',
  ];

  $effects['graphicsmagick_effects_enhance'] = [
    'label' => t('Enhance'),
    'help' => t('Enhancing an image will improve the quality of a noisy image.'),
    'dimensions passthrough' => TRUE,
    'effect callback' => 'graphicsmagick_effects_enhance',
  ];

  $effects['graphicsmagick_effects_equalize'] = [
    'label' => t('Equalize'),
    'help' => t('Equalizing an image will enhance the image contrast.'),
    'dimensions passthrough' => TRUE,
    'effect callback' => 'graphicsmagick_effects_enhance',
  ];

  $effects['graphicsmagick_effects_flip'] = [
    'label' => t('Vertical mirror'),
    'help' => t('This effect will create a vertical mirror image by reflecting the pixels around the central x-axis.'),
    'dimensions passthrough' => TRUE,
    'effect callback' => 'graphicsmagick_effects_flip',
  ];

  $effects['graphicsmagick_effects_flop'] = [
    'label' => t('Horizontal mirror'),
    'help' => t('This effect will create a horizontal mirror image by reflecting the pixels around the central y-axis.'),
    'dimensions passthrough' => TRUE,
    'effect callback' => 'graphicsmagick_effects_flop',
  ];

  $effects['graphicsmagick_effects_gamma'] = [
    'label' => t('Gamma'),
    'help' => t("This effect will change the gamma values. The same image viewed on different devices will have perceptual differences on intensity."),
    'dimensions passthrough' => TRUE,
    'form callback' => 'graphicsmagick_effects_gamma_form',
    'effect callback' => 'graphicsmagick_effects_gamma',
    'summary theme' => 'graphicsmagick_effects_gamma_summary',
  ];

  $effects['graphicsmagick_effects_noise'] = [
    'label' => t('Add noise'),
    'help' => t("This effect will add random noise to the image."),
    'dimensions passthrough' => TRUE,
    'form callback' => 'graphicsmagick_effects_noise_form',
    'effect callback' => 'graphicsmagick_effects_noise',
    'summary theme' => 'graphicsmagick_effects_noise_summary',
  ];

  $effects['graphicsmagick_effects_oil_paint'] = [
    'label' => t('Oil paint'),
    'help' => t('This effect will simulate an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.'),
    'dimensions passthrough' => TRUE,
    'form callback' => 'graphicsmagick_effects_oil_paint_form',
    'effect callback' => 'graphicsmagick_effects_oil_paint',
    'summary theme' => 'graphicsmagick_effects_oil_paint_summary',
  ];

  $effects['graphicsmagick_effects_solarize'] = [
    'label' => t('Solarize'),
    'help' => t('Solarizing will apply a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light.'),
    'dimensions passthrough' => TRUE,
    'form callback' => 'graphicsmagick_effects_solarize_form',
    'effect callback' => 'graphicsmagick_effects_solarize',
    'summary theme' => 'graphicsmagick_effects_solarize_summary',
  ];

  $effects['graphicsmagick_effects_spread'] = [
    'label' => t('Spread'),
    'help' => t('Special effects method that randomly displaces each pixel in a block defined by the radius parameter.'),
    'form callback' => 'graphicsmagick_effects_spread_form',
    'effect callback' => 'graphicsmagick_effects_spread',
    'summary theme' => 'graphicsmagick_effects_spread_summary',
  ];

  $effects['graphicsmagick_effects_swirl'] = [
    'label' => t('Swirl'),
    'help' => t('This effect will swirl the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved.'),
    'form callback' => 'graphicsmagick_effects_swirl_form',
    'effect callback' => 'graphicsmagick_effects_swirl',
    'summary theme' => 'graphicsmagick_effects_swirl_summary',
  ];

  return $effects;
}

/**
 * Implements hook_theme().
 */
function graphicsmagick_effects_theme() {
  $summary_base = [
    'variables' => [ 'data' => NULL],
    'file' => 'includes/graphicsmagick_effects.theme.inc',
  ];

  return [
    'graphicsmagick_effects_blur_summary' => $summary_base,
    'graphicsmagick_effects_emboss_summary' => $summary_base,
    'graphicsmagick_effects_gamma_summary' => $summary_base,
    'graphicsmagick_effects_noise_summary' => $summary_base,
    'graphicsmagick_effects_oil_paint_summary' => $summary_base,
    'graphicsmagick_effects_solarize_summary' => $summary_base,
    'graphicsmagick_effects_spread_summary' => $summary_base,
    'graphicsmagick_effects_swirl_summary' => $summary_base,
  ];
}

/**
 * Form structure for the blur effect.
 *
 * Note that this is not a complete form; it only contains the portion of the
 * form for configuring the effect options. Therefore, it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param array $data
 *   The current configuration for this effect.
 */
function graphicsmagick_effects_blur_form(array $data) {
  $form['radius'] = [
    '#type' => 'number',
    '#title' => t('Radius'),
    '#description' => t('This value should typically be either 0, to let the effect choose the best value, or be twice the sigma value.'),
    '#default_value' => isset($data['radius']) ? $data['radius'] : 0.0,
    '#required' => TRUE,
    '#min' => 0.0,
    '#max' => 65355.0,
    '#step' => 0.5,
  ];
  $form['sigma'] = [
    '#type' => 'number',
    '#title' => t('Sigma'),
    '#description' => t('A large sigma value and a smallish radius value will introduce artifacts in the resulting image; small sigma values are typically only used to fuzz lines and smooth edges on images for which no anti-aliasing was used.'),
    '#default_value' => isset($data['sigma']) ? $data['sigma'] : 1.0,
    '#required' => TRUE,
    '#min' => 0.0,
    '#max' => 65355.0,
    '#step' => 0.5,
  ];

  return $form;
}

/**
 * Image effect callback; blur an image.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when performing the bluring effect with the
 *   following items:
 *   - "radius": A float representing the Gaussian radius.
 *   - "sigma": A float representing the Gaussian sigma.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_blur($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->blurImage($data['radius'], $data['sigma']);
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Image effect callback; emboss an image.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when despeckling the image. No attributes are
 *   currently used for this effect.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_despeckle($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->despeckleImage();
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Form structure for the emboss effect.
 *
 * Note that this is not a complete form; it only contains the portion of the
 * form for configuring the effect options. Therefore, it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param array $data
 *   The current configuration for this effect.
 */
function graphicsmagick_effects_emboss_form(array $data) {
  $form['radius'] = [
    '#type' => 'number',
    '#title' => t('Radius'),
    '#description' => t('For reasonable results, the radius value should be higher than the sigma value. Use a value of zero to let the effect choose the best value.'),
    '#default_value' => isset($data['radius']) ? $data['radius'] : 0.0,
    '#required' => TRUE,
    '#min' => 0.0,
    '#max' => 65355.0,
    '#step' => 0.5,
  ];
  $form['sigma'] = [
    '#type' => 'number',
    '#title' => t('Sigma'),
    '#description' => t('A large sigma value works well also with color image. It can remove color dominances, but it could also introduce artifacts, especially in JPEG images.'),
    '#default_value' => isset($data['sigma']) ? $data['sigma'] : 1.0,
    '#required' => TRUE,
    '#min' => 0.0,
    '#max' => 65355.0,
    '#step' => 0.5,
  ];

  return $form;
}

/**
 * Image effect callback; emboss an image.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when performing the emboss effect with the
 *   following items:
 *   - "radius": A float representing the Gaussian radius.
 *   - "sigma": A float representing the Gaussian sigma.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_emboss($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->embossImage($data['radius'], $data['sigma']);
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Image effect callback; enhance an image.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when enhancing an image. No attributes are
 *   currently used for this effect.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to blur the image.
 */
function graphicsmagick_effects_enhance($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->enhanceImage();
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Image effect callback; equalize an image.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when equalizing an image. No attributes are
 *   currently used for this effect.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to blur the image.
 */
function graphicsmagick_effects_equalize($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->equalizeImage();
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Image effect callback; create a vertical mirror image.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when creating a vertical mirror image. No
 *   attributes are currently used for this effect.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to blur the image.
 */
function graphicsmagick_effects_flip($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->flipImage();
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Image effect callback; create a horizontal mirror image.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when creating a horizontal mirror image. No
 *   attributes are currently used for this effect.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_flop($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->flopImage();
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Form structure for the gamma effect.
 *
 * Note that this is not a complete form; it only contains the portion of the
 * form for configuring the effect options. Therefore, it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param array $data
 *   The current configuration for this effect.
 */
function graphicsmagick_effects_gamma_form(array $data) {
  $form['gamma'] = [
    '#type' => 'number',
    '#title' => t('Gamma'),
    '#description' => t('Values typically range from 0.8 to 2.3. Values lower than one make the image darker; values higher than one make the image lighter.'),
    '#default_value' => isset($data['gamma']) ? $data['gamma'] : 0.8,
    '#required' => TRUE,
    '#min' => 0.0,
    '#max' => 10.0,
    '#step' => 0.2,
  ];

  return $form;
}

/**
 * Image effect callback; change the image gamma value.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when changing the gamma value with the
 *   following items:
 *   - "gamma": A float representing the new gamma value.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_gamma($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->gammaImage($data['gamma']);
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Form structure for the noise effect.
 *
 * Note that this is not a complete form; it only contains the portion of the
 * form for configuring the effect options. Therefore, it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param array $data
 *   The current configuration for this effect.
 */
function graphicsmagick_effects_noise_form(array $data) {
  $form['noise'] = [
    '#type' => 'select',
    '#title' => t('Noise type'),
    '#description' => t('The noise type changes for which pixels the color is randomly changed.'),
    '#options' => graphicsmagick_image_noise_options(),
    '#default_value' => isset($data['noise']) ? $data['noise'] : Gmagick::NOISE_UNIFORM,
    '#required' => TRUE,
  ];

  return $form;
}

/**
 * Image effect callback; add random noise.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when applying the effect with the
 *   following items:
 *   - "noise": The noise type.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_noise($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->addNoiseImage($data['radius']);
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Form structure for the oil painting effect.
 *
 * Note that this is not a complete form; it only contains the portion of the
 * form for configuring the effect options. Therefore, it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param array $data
 *   The current configuration for this effect.
 */
function graphicsmagick_effects_oil_paint_form(array $data) {
  $form['radius'] = [
    '#type' => 'number',
    '#title' => t('Radius'),
    '#description' => t('Each pixel is replaced by the most frequent color occurring in a circular region defined by the radius value.'),
    '#default_value' => isset($data['radius']) ? $data['radius'] : 0.8,
    '#required' => TRUE,
    '#min' => 0.6,
    '#max' => 50.0,
    '#step' => 0.2,
  ];

  return $form;
}

/**
 * Image effect callback; simulate an oil painting.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when applying the effect with the
 *   following items:
 *   - "radius": A float representing the the radius of the circular region used
 *     to calculate the most frequent color.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_oil_paint($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->oilPaintImage($data['radius']);
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Form structure for the solarize effect.
 *
 * Note that this is not a complete form; it only contains the portion of the
 * form for configuring the effect options. Therefore, it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param array $data
 *   The current configuration for this effect.
 */
function graphicsmagick_effects_solarize_form(array $data) {
  try {
    $gmagick = new Gmagick();
    $quantum_level = $gmagick->getQuantumDepth()['quantumDepthLong'];
  }
  catch (Exception $e) {
    // As getting the quantum dept value failed, assume its value is 8.
    $quantum_level = 8;
  }

  $level = isset($data['level']) ? $data['level'] : 1 << (($quantum_level / 2) - 2);

  $form['level'] = [
    '#type' => 'number',
    '#title' => t('Level'),
    '#description' => t('The effect level.'),
    '#default_value' => $level,
    '#required' => TRUE,
    '#min' => 0,
    '#max' => 1 << $quantum_level,
    '#step' => 1,
  ];

  return $form;
}

/**
 * Image effect callback; simulate a solarize effect.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when applying the effect with the
 *   following items:
 *   - "level": An integer representing the level of the effect.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_solarize($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->solarizeImage($data['level']);
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Form structure for the spread effect.
 *
 * Note that this is not a complete form; it only contains the portion of the
 * form for configuring the effect options. Therefore, it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param array $data
 *   The current configuration for this effect.
 */
function graphicsmagick_effects_spread_form(array $data) {
  $form['radius'] = [
    '#type' => 'number',
    '#title' => t('Radius'),
    '#description' => t('Each pixel in a block defined by the radius parameter is randomly displaced.'),
    '#default_value' => isset($data['radius']) ? $data['radius'] : 2.0,
    '#required' => TRUE,
    '#min' => 0.0,
    '#max' => 50.0,
    '#step' => 0.4,
  ];

  return $form;
}

/**
 * Image effect callback; randomly displace each pixel in a circular region.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when applying the effect with the
 *   following items:
 *   - "radius":  A float representing the the radius of the circular region
 *     where the pixels are randomly displaced.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_spread($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->spreadImage($data['radius']);
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}

/**
 * Form structure for the swirl effect.
 *
 * Note that this is not a complete form; it only contains the portion of the
 * form for configuring the effect options. Therefore, it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param array $data
 *   The current configuration for this effect.
 */
function graphicsmagick_effects_swirl_form(array $data) {
  $form['degrees'] = [
    '#type' => 'number',
    '#title' => t('Degrees'),
    '#description' => t('The sweep of the arc through which each pixel is moved.'),
    '#default_value' => isset($data['degrees']) ? $data['degrees'] : 10.0,
    '#required' => TRUE,
    '#min' => 0.0,
    '#max' => 360.0,
    '#step' => 2.0,
  ];

  return $form;
}

/**
 * Image effect callback; randomly displace each pixel in a circular region.
 *
 * @param object $image
 *   An image object.
 * @param array $data
 *   An array of attributes to use when applying the effect with the
 *   following items:
 *   - "degrees":  A float representing the sweep of the arc through which each
 *     pixel is moved.
 *
 * @return bool
 *   TRUE on success, FALSE on failure to apply the effect.
 */
function graphicsmagick_effects_swirl($image, array $data) {
  $effect = function ($handler, $data) {
    return $handler->swirlImage($data['degrees']);
  };

  return graphicsmagick_image_effect($image, $effect, $data);
}
